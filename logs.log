2025-03-13 11:17:13,767:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-13 11:17:13,767:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-13 11:17:13,767:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-13 11:17:13,767:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-13 11:17:14,301:INFO:PyCaret ClassificationExperiment
2025-03-13 11:17:14,301:INFO:Logging name: clf-default-name
2025-03-13 11:17:14,301:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-03-13 11:17:14,301:INFO:version 3.3.2
2025-03-13 11:17:14,301:INFO:Initializing setup()
2025-03-13 11:17:14,301:INFO:self.USI: 9536
2025-03-13 11:17:14,301:INFO:self._variable_keys: {'memory', '_available_plots', 'X_test', 'data', 'gpu_param', 'exp_name_log', 'y_test', 'html_param', 'fold_groups_param', 'gpu_n_jobs_param', 'fix_imbalance', 'pipeline', 'X_train', 'log_plots_param', 'exp_id', 'seed', 'USI', '_ml_usecase', 'target_param', 'n_jobs_param', 'logging_param', 'fold_shuffle_param', 'fold_generator', 'y', 'X', 'y_train', 'is_multiclass', 'idx'}
2025-03-13 11:17:14,301:INFO:Checking environment
2025-03-13 11:17:14,301:INFO:python_version: 3.9.21
2025-03-13 11:17:14,301:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-03-13 11:17:14,302:INFO:machine: AMD64
2025-03-13 11:17:14,302:INFO:platform: Windows-10-10.0.26100-SP0
2025-03-13 11:17:14,302:INFO:Memory: svmem(total=25372119040, available=4406566912, percent=82.6, used=20965552128, free=4406566912)
2025-03-13 11:17:14,302:INFO:Physical Core: 10
2025-03-13 11:17:14,302:INFO:Logical Core: 16
2025-03-13 11:17:14,302:INFO:Checking libraries
2025-03-13 11:17:14,303:INFO:System:
2025-03-13 11:17:14,303:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-03-13 11:17:14,303:INFO:executable: c:\Users\Asus\anaconda3\envs\RUL\python.exe
2025-03-13 11:17:14,303:INFO:   machine: Windows-10-10.0.26100-SP0
2025-03-13 11:17:14,303:INFO:PyCaret required dependencies:
2025-03-13 11:17:14,427:INFO:                 pip: 24.2
2025-03-13 11:17:14,427:INFO:          setuptools: 75.1.0
2025-03-13 11:17:14,427:INFO:             pycaret: 3.3.2
2025-03-13 11:17:14,427:INFO:             IPython: 8.12.0
2025-03-13 11:17:14,427:INFO:          ipywidgets: 8.1.5
2025-03-13 11:17:14,427:INFO:                tqdm: 4.67.1
2025-03-13 11:17:14,427:INFO:               numpy: 1.24.3
2025-03-13 11:17:14,427:INFO:              pandas: 2.1.4
2025-03-13 11:17:14,427:INFO:              jinja2: 3.1.5
2025-03-13 11:17:14,427:INFO:               scipy: 1.11.4
2025-03-13 11:17:14,427:INFO:              joblib: 1.3.2
2025-03-13 11:17:14,427:INFO:             sklearn: 1.4.2
2025-03-13 11:17:14,427:INFO:                pyod: 2.0.3
2025-03-13 11:17:14,427:INFO:            imblearn: 0.12.4
2025-03-13 11:17:14,427:INFO:   category_encoders: 2.6.4
2025-03-13 11:17:14,427:INFO:            lightgbm: 4.6.0
2025-03-13 11:17:14,427:INFO:               numba: 0.60.0
2025-03-13 11:17:14,427:INFO:            requests: 2.32.3
2025-03-13 11:17:14,427:INFO:          matplotlib: 3.7.5
2025-03-13 11:17:14,427:INFO:          scikitplot: 0.3.7
2025-03-13 11:17:14,427:INFO:         yellowbrick: 1.5
2025-03-13 11:17:14,427:INFO:              plotly: 5.24.1
2025-03-13 11:17:14,427:INFO:    plotly-resampler: Not installed
2025-03-13 11:17:14,427:INFO:             kaleido: 0.2.1
2025-03-13 11:17:14,427:INFO:           schemdraw: 0.15
2025-03-13 11:17:14,427:INFO:         statsmodels: 0.14.4
2025-03-13 11:17:14,427:INFO:              sktime: 0.26.0
2025-03-13 11:17:14,427:INFO:               tbats: 1.1.3
2025-03-13 11:17:14,427:INFO:            pmdarima: 2.0.4
2025-03-13 11:17:14,427:INFO:              psutil: 5.9.0
2025-03-13 11:17:14,427:INFO:          markupsafe: 3.0.2
2025-03-13 11:17:14,427:INFO:             pickle5: Not installed
2025-03-13 11:17:14,427:INFO:         cloudpickle: 2.2.1
2025-03-13 11:17:14,427:INFO:         deprecation: 2.1.0
2025-03-13 11:17:14,427:INFO:              xxhash: 3.5.0
2025-03-13 11:17:14,427:INFO:           wurlitzer: Not installed
2025-03-13 11:17:14,427:INFO:PyCaret optional dependencies:
2025-03-13 11:17:14,516:INFO:                shap: Not installed
2025-03-13 11:17:14,516:INFO:           interpret: Not installed
2025-03-13 11:17:14,516:INFO:                umap: Not installed
2025-03-13 11:17:14,516:INFO:     ydata_profiling: Not installed
2025-03-13 11:17:14,516:INFO:  explainerdashboard: Not installed
2025-03-13 11:17:14,516:INFO:             autoviz: Not installed
2025-03-13 11:17:14,516:INFO:           fairlearn: Not installed
2025-03-13 11:17:14,516:INFO:          deepchecks: Not installed
2025-03-13 11:17:14,516:INFO:             xgboost: Not installed
2025-03-13 11:17:14,516:INFO:            catboost: Not installed
2025-03-13 11:17:14,516:INFO:              kmodes: Not installed
2025-03-13 11:17:14,516:INFO:             mlxtend: Not installed
2025-03-13 11:17:14,516:INFO:       statsforecast: Not installed
2025-03-13 11:17:14,516:INFO:        tune_sklearn: Not installed
2025-03-13 11:17:14,516:INFO:                 ray: Not installed
2025-03-13 11:17:14,516:INFO:            hyperopt: Not installed
2025-03-13 11:17:14,516:INFO:              optuna: Not installed
2025-03-13 11:17:14,516:INFO:               skopt: Not installed
2025-03-13 11:17:14,516:INFO:              mlflow: Not installed
2025-03-13 11:17:14,516:INFO:              gradio: Not installed
2025-03-13 11:17:14,517:INFO:             fastapi: Not installed
2025-03-13 11:17:14,517:INFO:             uvicorn: 0.34.0
2025-03-13 11:17:14,517:INFO:              m2cgen: Not installed
2025-03-13 11:17:14,517:INFO:           evidently: Not installed
2025-03-13 11:17:14,517:INFO:               fugue: Not installed
2025-03-13 11:17:14,517:INFO:           streamlit: Not installed
2025-03-13 11:17:14,517:INFO:             prophet: 1.1.6
2025-03-13 11:17:14,517:INFO:None
2025-03-13 11:17:14,517:INFO:Set up data.
2025-03-13 11:17:14,525:INFO:Set up folding strategy.
2025-03-13 11:17:14,525:INFO:Set up train/test split.
2025-03-13 11:17:14,544:INFO:Set up index.
2025-03-13 11:17:14,545:INFO:Assigning column types.
2025-03-13 11:17:14,552:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-03-13 11:17:14,577:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 11:17:14,581:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-13 11:17:14,604:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,604:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,630:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 11:17:14,631:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-13 11:17:14,646:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,646:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,646:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-03-13 11:17:14,672:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-13 11:17:14,689:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,689:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,714:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-13 11:17:14,729:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,731:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,731:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-03-13 11:17:14,774:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,774:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,817:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,817:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:14,818:INFO:Preparing preprocessing pipeline...
2025-03-13 11:17:14,823:INFO:Set up label encoding.
2025-03-13 11:17:14,823:INFO:Set up simple imputation.
2025-03-13 11:17:14,823:INFO:Set up feature normalization.
2025-03-13 11:17:14,873:INFO:Finished creating preprocessing pipeline.
2025-03-13 11:17:14,877:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Asus\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['X_LOC', 'Y_LOC', 'Z_LOC', 'NPHI',
                                             'DTC', 'SP', 'GR', 'CALI'],
                                    transformer=SimpleImputer(add_indicator=False,...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2025-03-13 11:17:14,878:INFO:Creating final display dataframe.
2025-03-13 11:17:14,988:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9                    Preprocess   
10              Imputation type   
11           Numeric imputation   
12       Categorical imputation   
13                    Normalize   
14             Normalize method   
15               Fold Generator   
16                  Fold Number   
17                     CPU Jobs   
18                      Use GPU   
19               Log Experiment   
20              Experiment Name   
21                          USI   

                                                Value  
0                                                  42  
1                                      Lithology_code  
2                                          Multiclass  
3   30000.0: 0, 65000.0: 1, 65030.0: 2, 70000.0: 3...  
4                                          (51625, 9)  
5                                          (51625, 9)  
6                                          (36137, 9)  
7                                          (15488, 9)  
8                                                   8  
9                                                True  
10                                             simple  
11                                               mean  
12                                               mode  
13                                               True  
14                                             zscore  
15                                    StratifiedKFold  
16                                                 10  
17                                                 -1  
18                                              False  
19                                              False  
20                                   clf-default-name  
21                                               9536  
2025-03-13 11:17:15,037:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:15,037:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:15,083:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:15,084:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 11:17:15,085:INFO:setup() successfully completed in 0.79s...............
2025-03-13 11:17:15,085:INFO:Initializing compare_models()
2025-03-13 11:17:15,085:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-03-13 11:17:15,085:INFO:Checking exceptions
2025-03-13 11:17:15,095:INFO:Preparing display monitor
2025-03-13 11:17:15,117:INFO:Initializing Logistic Regression
2025-03-13 11:17:15,117:INFO:Total runtime is 0.0 minutes
2025-03-13 11:17:15,120:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:15,120:INFO:Initializing create_model()
2025-03-13 11:17:15,120:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:15,120:INFO:Checking exceptions
2025-03-13 11:17:15,120:INFO:Importing libraries
2025-03-13 11:17:15,120:INFO:Copying training dataset
2025-03-13 11:17:15,132:INFO:Defining folds
2025-03-13 11:17:15,132:INFO:Declaring metric variables
2025-03-13 11:17:15,135:INFO:Importing untrained model
2025-03-13 11:17:15,139:INFO:Logistic Regression Imported successfully
2025-03-13 11:17:15,147:INFO:Starting cross validation
2025-03-13 11:17:15,148:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:23,136:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,142:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,148:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,155:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,187:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,194:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,200:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,205:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,214:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,220:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,226:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,229:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:23,233:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,342:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,347:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,351:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,357:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,360:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,363:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,367:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,370:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,380:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,385:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,389:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,399:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:23,402:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,408:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,415:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,419:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,423:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,425:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,429:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,432:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,435:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:23,439:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,517:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,519:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,523:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,524:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:23,525:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,546:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:23,548:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,552:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,555:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:23,573:INFO:Calculating mean and std
2025-03-13 11:17:23,575:INFO:Creating metrics dataframe
2025-03-13 11:17:23,578:INFO:Uploading results into container
2025-03-13 11:17:23,579:INFO:Uploading model into container now
2025-03-13 11:17:23,579:INFO:_master_model_container: 1
2025-03-13 11:17:23,579:INFO:_display_container: 2
2025-03-13 11:17:23,579:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-13 11:17:23,579:INFO:create_model() successfully completed......................................
2025-03-13 11:17:23,639:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:23,639:INFO:Creating metrics dataframe
2025-03-13 11:17:23,643:INFO:Initializing K Neighbors Classifier
2025-03-13 11:17:23,643:INFO:Total runtime is 0.14210340181986492 minutes
2025-03-13 11:17:23,647:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:23,647:INFO:Initializing create_model()
2025-03-13 11:17:23,647:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:23,647:INFO:Checking exceptions
2025-03-13 11:17:23,647:INFO:Importing libraries
2025-03-13 11:17:23,647:INFO:Copying training dataset
2025-03-13 11:17:23,656:INFO:Defining folds
2025-03-13 11:17:23,656:INFO:Declaring metric variables
2025-03-13 11:17:23,659:INFO:Importing untrained model
2025-03-13 11:17:23,662:INFO:K Neighbors Classifier Imported successfully
2025-03-13 11:17:23,668:INFO:Starting cross validation
2025-03-13 11:17:23,668:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:24,224:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,230:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,239:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,272:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,283:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,289:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,302:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,308:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,315:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,325:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,333:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:24,339:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,099:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,099:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,104:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,104:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,108:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,108:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,165:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,169:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,170:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,174:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,178:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,185:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,194:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,197:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,202:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,222:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,228:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,233:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,255:INFO:Calculating mean and std
2025-03-13 11:17:27,255:INFO:Creating metrics dataframe
2025-03-13 11:17:27,257:INFO:Uploading results into container
2025-03-13 11:17:27,257:INFO:Uploading model into container now
2025-03-13 11:17:27,258:INFO:_master_model_container: 2
2025-03-13 11:17:27,258:INFO:_display_container: 2
2025-03-13 11:17:27,258:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-03-13 11:17:27,258:INFO:create_model() successfully completed......................................
2025-03-13 11:17:27,319:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:27,319:INFO:Creating metrics dataframe
2025-03-13 11:17:27,327:INFO:Initializing Naive Bayes
2025-03-13 11:17:27,327:INFO:Total runtime is 0.20350132783253988 minutes
2025-03-13 11:17:27,330:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:27,330:INFO:Initializing create_model()
2025-03-13 11:17:27,330:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:27,330:INFO:Checking exceptions
2025-03-13 11:17:27,330:INFO:Importing libraries
2025-03-13 11:17:27,330:INFO:Copying training dataset
2025-03-13 11:17:27,341:INFO:Defining folds
2025-03-13 11:17:27,341:INFO:Declaring metric variables
2025-03-13 11:17:27,344:INFO:Importing untrained model
2025-03-13 11:17:27,346:INFO:Naive Bayes Imported successfully
2025-03-13 11:17:27,352:INFO:Starting cross validation
2025-03-13 11:17:27,353:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:27,455:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,460:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,464:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:27,464:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,467:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,468:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,470:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,475:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:27,475:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,477:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:27,478:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,480:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,485:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,489:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,490:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:27,492:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,493:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,495:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,498:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:27,499:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,500:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,503:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,505:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:27,507:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,509:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,513:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,514:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,515:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,517:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,517:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,519:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,519:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:27,520:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,520:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,526:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,530:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,533:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:27,534:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:27,550:INFO:Calculating mean and std
2025-03-13 11:17:27,550:INFO:Creating metrics dataframe
2025-03-13 11:17:27,552:INFO:Uploading results into container
2025-03-13 11:17:27,553:INFO:Uploading model into container now
2025-03-13 11:17:27,553:INFO:_master_model_container: 3
2025-03-13 11:17:27,553:INFO:_display_container: 2
2025-03-13 11:17:27,553:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-03-13 11:17:27,553:INFO:create_model() successfully completed......................................
2025-03-13 11:17:27,612:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:27,612:INFO:Creating metrics dataframe
2025-03-13 11:17:27,617:INFO:Initializing Decision Tree Classifier
2025-03-13 11:17:27,617:INFO:Total runtime is 0.20833611488342285 minutes
2025-03-13 11:17:27,620:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:27,620:INFO:Initializing create_model()
2025-03-13 11:17:27,620:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:27,620:INFO:Checking exceptions
2025-03-13 11:17:27,620:INFO:Importing libraries
2025-03-13 11:17:27,620:INFO:Copying training dataset
2025-03-13 11:17:27,629:INFO:Defining folds
2025-03-13 11:17:27,629:INFO:Declaring metric variables
2025-03-13 11:17:27,633:INFO:Importing untrained model
2025-03-13 11:17:27,636:INFO:Decision Tree Classifier Imported successfully
2025-03-13 11:17:27,642:INFO:Starting cross validation
2025-03-13 11:17:27,643:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:28,328:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,333:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,335:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,338:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,341:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,344:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,345:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,350:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,356:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,357:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,359:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,360:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,363:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,366:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,367:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,375:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,380:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,383:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,385:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,386:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,390:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,393:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,395:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,396:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,399:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,399:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,402:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,402:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,405:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,408:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:28,420:INFO:Calculating mean and std
2025-03-13 11:17:28,421:INFO:Creating metrics dataframe
2025-03-13 11:17:28,422:INFO:Uploading results into container
2025-03-13 11:17:28,422:INFO:Uploading model into container now
2025-03-13 11:17:28,423:INFO:_master_model_container: 4
2025-03-13 11:17:28,423:INFO:_display_container: 2
2025-03-13 11:17:28,423:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-03-13 11:17:28,423:INFO:create_model() successfully completed......................................
2025-03-13 11:17:28,483:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:28,483:INFO:Creating metrics dataframe
2025-03-13 11:17:28,488:INFO:Initializing SVM - Linear Kernel
2025-03-13 11:17:28,488:INFO:Total runtime is 0.2228495955467224 minutes
2025-03-13 11:17:28,491:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:28,491:INFO:Initializing create_model()
2025-03-13 11:17:28,491:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:28,491:INFO:Checking exceptions
2025-03-13 11:17:28,491:INFO:Importing libraries
2025-03-13 11:17:28,491:INFO:Copying training dataset
2025-03-13 11:17:28,501:INFO:Defining folds
2025-03-13 11:17:28,501:INFO:Declaring metric variables
2025-03-13 11:17:28,504:INFO:Importing untrained model
2025-03-13 11:17:28,508:INFO:SVM - Linear Kernel Imported successfully
2025-03-13 11:17:28,513:INFO:Starting cross validation
2025-03-13 11:17:28,514:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:29,102:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,102:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,105:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,105:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,111:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,111:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,116:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,117:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,182:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,184:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,190:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,196:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,249:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,252:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,252:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,255:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,256:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,260:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,262:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,265:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,266:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,267:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,268:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,269:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,270:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,270:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,271:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,271:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,272:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,273:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,273:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,274:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,275:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,275:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,276:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,277:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,277:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,279:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,280:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,281:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,299:INFO:Calculating mean and std
2025-03-13 11:17:29,300:INFO:Creating metrics dataframe
2025-03-13 11:17:29,301:INFO:Uploading results into container
2025-03-13 11:17:29,302:INFO:Uploading model into container now
2025-03-13 11:17:29,302:INFO:_master_model_container: 5
2025-03-13 11:17:29,303:INFO:_display_container: 2
2025-03-13 11:17:29,303:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-03-13 11:17:29,303:INFO:create_model() successfully completed......................................
2025-03-13 11:17:29,362:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:29,362:INFO:Creating metrics dataframe
2025-03-13 11:17:29,367:INFO:Initializing Ridge Classifier
2025-03-13 11:17:29,367:INFO:Total runtime is 0.23751341501871745 minutes
2025-03-13 11:17:29,370:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:29,370:INFO:Initializing create_model()
2025-03-13 11:17:29,370:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:29,370:INFO:Checking exceptions
2025-03-13 11:17:29,370:INFO:Importing libraries
2025-03-13 11:17:29,370:INFO:Copying training dataset
2025-03-13 11:17:29,380:INFO:Defining folds
2025-03-13 11:17:29,382:INFO:Declaring metric variables
2025-03-13 11:17:29,384:INFO:Importing untrained model
2025-03-13 11:17:29,387:INFO:Ridge Classifier Imported successfully
2025-03-13 11:17:29,393:INFO:Starting cross validation
2025-03-13 11:17:29,394:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:29,495:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,498:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,499:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,503:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,505:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,508:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,510:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,512:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,513:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,513:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,514:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,514:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,516:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,516:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,517:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,519:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,520:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,522:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,523:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,523:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,525:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,526:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,527:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,529:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,533:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,536:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,539:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,540:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,543:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,545:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,546:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,547:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,549:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,549:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,550:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,552:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,555:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,557:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,558:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,560:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,562:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:29,562:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,564:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,566:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,567:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,567:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,569:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:29,569:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,571:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:29,590:INFO:Calculating mean and std
2025-03-13 11:17:29,593:INFO:Creating metrics dataframe
2025-03-13 11:17:29,594:INFO:Uploading results into container
2025-03-13 11:17:29,595:INFO:Uploading model into container now
2025-03-13 11:17:29,595:INFO:_master_model_container: 6
2025-03-13 11:17:29,595:INFO:_display_container: 2
2025-03-13 11:17:29,595:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-03-13 11:17:29,595:INFO:create_model() successfully completed......................................
2025-03-13 11:17:29,656:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:29,656:INFO:Creating metrics dataframe
2025-03-13 11:17:29,662:INFO:Initializing Random Forest Classifier
2025-03-13 11:17:29,662:INFO:Total runtime is 0.2424299756685893 minutes
2025-03-13 11:17:29,666:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:29,666:INFO:Initializing create_model()
2025-03-13 11:17:29,666:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:29,666:INFO:Checking exceptions
2025-03-13 11:17:29,666:INFO:Importing libraries
2025-03-13 11:17:29,666:INFO:Copying training dataset
2025-03-13 11:17:29,677:INFO:Defining folds
2025-03-13 11:17:29,677:INFO:Declaring metric variables
2025-03-13 11:17:29,680:INFO:Importing untrained model
2025-03-13 11:17:29,684:INFO:Random Forest Classifier Imported successfully
2025-03-13 11:17:29,690:INFO:Starting cross validation
2025-03-13 11:17:29,692:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:38,827:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,828:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,830:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,830:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,836:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,838:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,842:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,846:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,846:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,847:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,848:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,850:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,855:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,856:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,862:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,875:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,875:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,882:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,882:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,888:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,889:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,890:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,895:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,900:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,906:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,910:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,917:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,931:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,935:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,939:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:38,960:INFO:Calculating mean and std
2025-03-13 11:17:38,960:INFO:Creating metrics dataframe
2025-03-13 11:17:38,963:INFO:Uploading results into container
2025-03-13 11:17:38,964:INFO:Uploading model into container now
2025-03-13 11:17:38,964:INFO:_master_model_container: 7
2025-03-13 11:17:38,964:INFO:_display_container: 2
2025-03-13 11:17:38,964:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-03-13 11:17:38,965:INFO:create_model() successfully completed......................................
2025-03-13 11:17:39,028:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:39,029:INFO:Creating metrics dataframe
2025-03-13 11:17:39,034:INFO:Initializing Quadratic Discriminant Analysis
2025-03-13 11:17:39,034:INFO:Total runtime is 0.3986287315686544 minutes
2025-03-13 11:17:39,038:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:39,038:INFO:Initializing create_model()
2025-03-13 11:17:39,038:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:39,038:INFO:Checking exceptions
2025-03-13 11:17:39,038:INFO:Importing libraries
2025-03-13 11:17:39,038:INFO:Copying training dataset
2025-03-13 11:17:39,049:INFO:Defining folds
2025-03-13 11:17:39,049:INFO:Declaring metric variables
2025-03-13 11:17:39,053:INFO:Importing untrained model
2025-03-13 11:17:39,056:INFO:Quadratic Discriminant Analysis Imported successfully
2025-03-13 11:17:39,063:INFO:Starting cross validation
2025-03-13 11:17:39,064:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:39,180:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,182:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,182:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,183:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,184:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,194:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,207:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,208:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,209:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,210:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,212:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,214:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,216:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,216:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,217:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,218:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,218:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,219:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,219:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,220:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,223:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,223:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,223:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,224:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,225:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,225:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,226:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,229:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,229:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-13 11:17:39,230:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,230:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,233:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,234:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,235:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,237:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,237:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,238:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,241:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,242:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,243:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,244:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,247:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,248:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,249:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,250:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:39,252:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,252:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,253:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,256:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,260:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:39,282:INFO:Calculating mean and std
2025-03-13 11:17:39,283:INFO:Creating metrics dataframe
2025-03-13 11:17:39,284:INFO:Uploading results into container
2025-03-13 11:17:39,285:INFO:Uploading model into container now
2025-03-13 11:17:39,285:INFO:_master_model_container: 8
2025-03-13 11:17:39,285:INFO:_display_container: 2
2025-03-13 11:17:39,285:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-03-13 11:17:39,285:INFO:create_model() successfully completed......................................
2025-03-13 11:17:39,347:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:39,347:INFO:Creating metrics dataframe
2025-03-13 11:17:39,354:INFO:Initializing Ada Boost Classifier
2025-03-13 11:17:39,354:INFO:Total runtime is 0.40395581324895224 minutes
2025-03-13 11:17:39,358:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:39,358:INFO:Initializing create_model()
2025-03-13 11:17:39,358:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:39,359:INFO:Checking exceptions
2025-03-13 11:17:39,359:INFO:Importing libraries
2025-03-13 11:17:39,359:INFO:Copying training dataset
2025-03-13 11:17:39,371:INFO:Defining folds
2025-03-13 11:17:39,371:INFO:Declaring metric variables
2025-03-13 11:17:39,375:INFO:Importing untrained model
2025-03-13 11:17:39,377:INFO:Ada Boost Classifier Imported successfully
2025-03-13 11:17:39,385:INFO:Starting cross validation
2025-03-13 11:17:39,386:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:17:39,444:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,455:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,460:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,463:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,479:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,496:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,496:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,505:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,516:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:39,521:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-13 11:17:43,722:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,724:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,730:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,733:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,737:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,748:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,750:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,757:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,760:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,764:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,783:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,785:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,790:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,793:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,796:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,797:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,798:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,800:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,800:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,804:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,806:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,808:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,809:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,810:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,812:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,828:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,830:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,834:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,835:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,837:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,852:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,855:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,860:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,863:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,864:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,866:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,866:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,872:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,874:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,877:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,887:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,889:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:17:43,889:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,890:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,893:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,895:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,895:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,896:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:17:43,897:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,898:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:17:43,917:INFO:Calculating mean and std
2025-03-13 11:17:43,918:INFO:Creating metrics dataframe
2025-03-13 11:17:43,921:INFO:Uploading results into container
2025-03-13 11:17:43,921:INFO:Uploading model into container now
2025-03-13 11:17:43,922:INFO:_master_model_container: 9
2025-03-13 11:17:43,922:INFO:_display_container: 2
2025-03-13 11:17:43,922:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-03-13 11:17:43,922:INFO:create_model() successfully completed......................................
2025-03-13 11:17:43,990:INFO:SubProcess create_model() end ==================================
2025-03-13 11:17:43,990:INFO:Creating metrics dataframe
2025-03-13 11:17:43,997:INFO:Initializing Gradient Boosting Classifier
2025-03-13 11:17:43,998:INFO:Total runtime is 0.4813474456469218 minutes
2025-03-13 11:17:44,001:INFO:SubProcess create_model() called ==================================
2025-03-13 11:17:44,001:INFO:Initializing create_model()
2025-03-13 11:17:44,001:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:17:44,001:INFO:Checking exceptions
2025-03-13 11:17:44,001:INFO:Importing libraries
2025-03-13 11:17:44,001:INFO:Copying training dataset
2025-03-13 11:17:44,012:INFO:Defining folds
2025-03-13 11:17:44,012:INFO:Declaring metric variables
2025-03-13 11:17:44,015:INFO:Importing untrained model
2025-03-13 11:17:44,019:INFO:Gradient Boosting Classifier Imported successfully
2025-03-13 11:17:44,027:INFO:Starting cross validation
2025-03-13 11:17:44,028:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:20:33,844:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:33,847:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:33,854:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:33,858:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:33,904:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:33,906:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:33,913:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:33,918:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,045:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:34,048:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,054:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,059:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,129:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:34,131:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,135:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,141:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,297:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:34,299:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,304:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,310:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,331:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:34,333:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,338:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,345:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,913:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:34,915:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,918:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,921:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,945:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:34,949:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,953:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:34,956:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:35,862:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:35,864:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:35,867:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:35,870:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,031:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,032:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,035:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,038:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,058:INFO:Calculating mean and std
2025-03-13 11:20:43,059:INFO:Creating metrics dataframe
2025-03-13 11:20:43,060:INFO:Uploading results into container
2025-03-13 11:20:43,060:INFO:Uploading model into container now
2025-03-13 11:20:43,062:INFO:_master_model_container: 10
2025-03-13 11:20:43,062:INFO:_display_container: 2
2025-03-13 11:20:43,062:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-13 11:20:43,062:INFO:create_model() successfully completed......................................
2025-03-13 11:20:43,125:INFO:SubProcess create_model() end ==================================
2025-03-13 11:20:43,125:INFO:Creating metrics dataframe
2025-03-13 11:20:43,131:INFO:Initializing Linear Discriminant Analysis
2025-03-13 11:20:43,131:INFO:Total runtime is 3.4668999314308167 minutes
2025-03-13 11:20:43,134:INFO:SubProcess create_model() called ==================================
2025-03-13 11:20:43,134:INFO:Initializing create_model()
2025-03-13 11:20:43,134:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:20:43,134:INFO:Checking exceptions
2025-03-13 11:20:43,135:INFO:Importing libraries
2025-03-13 11:20:43,135:INFO:Copying training dataset
2025-03-13 11:20:43,146:INFO:Defining folds
2025-03-13 11:20:43,146:INFO:Declaring metric variables
2025-03-13 11:20:43,148:INFO:Importing untrained model
2025-03-13 11:20:43,152:INFO:Linear Discriminant Analysis Imported successfully
2025-03-13 11:20:43,160:INFO:Starting cross validation
2025-03-13 11:20:43,160:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:20:43,308:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,311:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,314:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,316:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,317:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,317:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,321:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,323:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,324:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,326:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:20:43,327:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,327:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,327:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,330:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,332:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,332:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,335:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,335:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,336:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,339:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:20:43,340:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,343:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,343:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,346:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,347:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,348:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,349:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,349:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,349:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,349:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,350:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,354:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,355:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,355:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,356:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:20:43,356:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-13 11:20:43,357:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,358:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,358:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,360:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,361:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,365:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:43,381:INFO:Calculating mean and std
2025-03-13 11:20:43,382:INFO:Creating metrics dataframe
2025-03-13 11:20:43,384:INFO:Uploading results into container
2025-03-13 11:20:43,384:INFO:Uploading model into container now
2025-03-13 11:20:43,384:INFO:_master_model_container: 11
2025-03-13 11:20:43,384:INFO:_display_container: 2
2025-03-13 11:20:43,384:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-03-13 11:20:43,384:INFO:create_model() successfully completed......................................
2025-03-13 11:20:43,447:INFO:SubProcess create_model() end ==================================
2025-03-13 11:20:43,448:INFO:Creating metrics dataframe
2025-03-13 11:20:43,454:INFO:Initializing Extra Trees Classifier
2025-03-13 11:20:43,454:INFO:Total runtime is 3.4722819328308105 minutes
2025-03-13 11:20:43,457:INFO:SubProcess create_model() called ==================================
2025-03-13 11:20:43,457:INFO:Initializing create_model()
2025-03-13 11:20:43,457:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:20:43,457:INFO:Checking exceptions
2025-03-13 11:20:43,457:INFO:Importing libraries
2025-03-13 11:20:43,458:INFO:Copying training dataset
2025-03-13 11:20:43,467:INFO:Defining folds
2025-03-13 11:20:43,467:INFO:Declaring metric variables
2025-03-13 11:20:43,470:INFO:Importing untrained model
2025-03-13 11:20:43,474:INFO:Extra Trees Classifier Imported successfully
2025-03-13 11:20:43,479:INFO:Starting cross validation
2025-03-13 11:20:43,480:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:20:46,380:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,387:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,391:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,391:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,398:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,398:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,399:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,400:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,405:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,407:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,418:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,422:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,422:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,424:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,424:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,446:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,447:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,452:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,479:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,480:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,482:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,485:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,486:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,490:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,494:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,495:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,499:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,543:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,549:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,554:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:20:46,578:INFO:Calculating mean and std
2025-03-13 11:20:46,579:INFO:Creating metrics dataframe
2025-03-13 11:20:46,582:INFO:Uploading results into container
2025-03-13 11:20:46,583:INFO:Uploading model into container now
2025-03-13 11:20:46,583:INFO:_master_model_container: 12
2025-03-13 11:20:46,583:INFO:_display_container: 2
2025-03-13 11:20:46,584:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-03-13 11:20:46,584:INFO:create_model() successfully completed......................................
2025-03-13 11:20:46,654:INFO:SubProcess create_model() end ==================================
2025-03-13 11:20:46,654:INFO:Creating metrics dataframe
2025-03-13 11:20:46,663:INFO:Initializing Light Gradient Boosting Machine
2025-03-13 11:20:46,663:INFO:Total runtime is 3.525765033562978 minutes
2025-03-13 11:20:46,666:INFO:SubProcess create_model() called ==================================
2025-03-13 11:20:46,667:INFO:Initializing create_model()
2025-03-13 11:20:46,667:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:20:46,667:INFO:Checking exceptions
2025-03-13 11:20:46,667:INFO:Importing libraries
2025-03-13 11:20:46,667:INFO:Copying training dataset
2025-03-13 11:20:46,680:INFO:Defining folds
2025-03-13 11:20:46,680:INFO:Declaring metric variables
2025-03-13 11:20:46,685:INFO:Importing untrained model
2025-03-13 11:20:46,689:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-13 11:20:46,697:INFO:Starting cross validation
2025-03-13 11:20:46,698:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:21:00,270:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:00,276:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:00,282:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:00,877:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:00,883:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:00,889:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,510:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,516:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,524:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,529:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,535:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,567:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,568:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,574:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,579:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,597:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,628:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,634:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,844:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,849:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:01,854:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:02,908:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:02,914:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:02,925:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,022:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,027:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,055:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,152:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,157:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,163:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,185:INFO:Calculating mean and std
2025-03-13 11:21:03,187:INFO:Creating metrics dataframe
2025-03-13 11:21:03,190:INFO:Uploading results into container
2025-03-13 11:21:03,190:INFO:Uploading model into container now
2025-03-13 11:21:03,190:INFO:_master_model_container: 13
2025-03-13 11:21:03,192:INFO:_display_container: 2
2025-03-13 11:21:03,192:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-13 11:21:03,192:INFO:create_model() successfully completed......................................
2025-03-13 11:21:03,275:INFO:SubProcess create_model() end ==================================
2025-03-13 11:21:03,275:INFO:Creating metrics dataframe
2025-03-13 11:21:03,285:INFO:Initializing Dummy Classifier
2025-03-13 11:21:03,286:INFO:Total runtime is 3.802823527654012 minutes
2025-03-13 11:21:03,289:INFO:SubProcess create_model() called ==================================
2025-03-13 11:21:03,291:INFO:Initializing create_model()
2025-03-13 11:21:03,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021492BCC1C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:21:03,291:INFO:Checking exceptions
2025-03-13 11:21:03,291:INFO:Importing libraries
2025-03-13 11:21:03,291:INFO:Copying training dataset
2025-03-13 11:21:03,307:INFO:Defining folds
2025-03-13 11:21:03,307:INFO:Declaring metric variables
2025-03-13 11:21:03,313:INFO:Importing untrained model
2025-03-13 11:21:03,318:INFO:Dummy Classifier Imported successfully
2025-03-13 11:21:03,328:INFO:Starting cross validation
2025-03-13 11:21:03,329:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 11:21:03,436:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,442:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,445:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,445:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,448:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,452:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,455:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,455:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,457:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,461:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,464:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,465:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,467:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,468:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,471:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,472:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,472:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,474:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,475:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,477:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,477:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,479:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,480:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,483:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,484:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,488:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,490:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,493:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,498:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,503:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,504:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,507:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,507:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,509:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,510:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,510:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,510:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,515:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,517:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-13 11:21:03,519:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:21:03,540:INFO:Calculating mean and std
2025-03-13 11:21:03,541:INFO:Creating metrics dataframe
2025-03-13 11:21:03,542:INFO:Uploading results into container
2025-03-13 11:21:03,543:INFO:Uploading model into container now
2025-03-13 11:21:03,543:INFO:_master_model_container: 14
2025-03-13 11:21:03,543:INFO:_display_container: 2
2025-03-13 11:21:03,544:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-03-13 11:21:03,544:INFO:create_model() successfully completed......................................
2025-03-13 11:21:03,641:INFO:SubProcess create_model() end ==================================
2025-03-13 11:21:03,641:INFO:Creating metrics dataframe
2025-03-13 11:21:03,653:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-03-13 11:21:03,661:INFO:Initializing create_model()
2025-03-13 11:21:03,661:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 11:21:03,661:INFO:Checking exceptions
2025-03-13 11:21:03,663:INFO:Importing libraries
2025-03-13 11:21:03,663:INFO:Copying training dataset
2025-03-13 11:21:03,676:INFO:Defining folds
2025-03-13 11:21:03,676:INFO:Declaring metric variables
2025-03-13 11:21:03,676:INFO:Importing untrained model
2025-03-13 11:21:03,676:INFO:Declaring custom model
2025-03-13 11:21:03,677:INFO:Extra Trees Classifier Imported successfully
2025-03-13 11:21:03,677:INFO:Cross validation set to False
2025-03-13 11:21:03,677:INFO:Fitting Model
2025-03-13 11:21:04,084:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-03-13 11:21:04,084:INFO:create_model() successfully completed......................................
2025-03-13 11:21:04,170:INFO:_master_model_container: 14
2025-03-13 11:21:04,170:INFO:_display_container: 2
2025-03-13 11:21:04,170:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-03-13 11:21:04,170:INFO:compare_models() successfully completed......................................
2025-03-13 11:21:04,172:INFO:Initializing evaluate_model()
2025-03-13 11:21:04,172:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-03-13 11:21:04,187:INFO:Initializing plot_model()
2025-03-13 11:21:04,187:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:21:04,187:INFO:Checking exceptions
2025-03-13 11:21:04,224:INFO:Preloading libraries
2025-03-13 11:21:04,388:INFO:Copying training dataset
2025-03-13 11:21:04,388:INFO:Plot type: pipeline
2025-03-13 11:21:04,546:INFO:Visual Rendered Successfully
2025-03-13 11:21:04,612:INFO:plot_model() successfully completed......................................
2025-03-13 11:21:35,194:INFO:Initializing plot_model()
2025-03-13 11:21:35,195:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:21:35,195:INFO:Checking exceptions
2025-03-13 11:21:35,220:INFO:Preloading libraries
2025-03-13 11:21:35,362:INFO:Copying training dataset
2025-03-13 11:21:35,362:INFO:Plot type: parameter
2025-03-13 11:21:35,365:INFO:Visual Rendered Successfully
2025-03-13 11:21:35,444:INFO:plot_model() successfully completed......................................
2025-03-13 11:21:43,113:INFO:Initializing plot_model()
2025-03-13 11:21:43,114:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:21:43,114:INFO:Checking exceptions
2025-03-13 11:21:43,143:INFO:Preloading libraries
2025-03-13 11:21:43,282:INFO:Copying training dataset
2025-03-13 11:21:43,282:INFO:Plot type: auc
2025-03-13 11:21:43,380:INFO:Fitting Model
2025-03-13 11:21:43,387:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2025-03-13 11:21:43,388:INFO:Scoring test/hold-out set
2025-03-13 11:21:43,709:INFO:Visual Rendered Successfully
2025-03-13 11:21:43,778:INFO:plot_model() successfully completed......................................
2025-03-13 11:21:53,622:INFO:Initializing plot_model()
2025-03-13 11:21:53,623:INFO:plot_model(plot=feature_all, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:21:53,623:INFO:Checking exceptions
2025-03-13 11:21:53,652:INFO:Preloading libraries
2025-03-13 11:21:53,786:INFO:Copying training dataset
2025-03-13 11:21:53,786:INFO:Plot type: feature_all
2025-03-13 11:21:53,816:WARNING:No coef_ found. Trying feature_importances_
2025-03-13 11:21:53,921:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\matplotlib\_tight_bbox.py:67: RuntimeWarning: divide by zero encountered in scalar divide
  fig.patch.set_bounds(x0 / w1, y0 / h1,

2025-03-13 11:21:53,921:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\matplotlib\_tight_bbox.py:68: RuntimeWarning: divide by zero encountered in scalar divide
  fig.bbox.width / w1, fig.bbox.height / h1)

2025-03-13 11:21:53,923:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\matplotlib\patches.py:739: RuntimeWarning: invalid value encountered in scalar add
  y1 = self.convert_yunits(self._y0 + self._height)

2025-03-13 11:21:53,926:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\matplotlib\transforms.py:2050: RuntimeWarning: invalid value encountered in scalar add
  self._mtx[1, 2] += ty

2025-03-13 11:21:53,944:INFO:Visual Rendered Successfully
2025-03-13 11:21:54,028:INFO:plot_model() successfully completed......................................
2025-03-13 11:21:57,375:INFO:Initializing plot_model()
2025-03-13 11:21:57,375:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:21:57,375:INFO:Checking exceptions
2025-03-13 11:21:57,404:INFO:Preloading libraries
2025-03-13 11:21:57,541:INFO:Copying training dataset
2025-03-13 11:21:57,541:INFO:Plot type: feature
2025-03-13 11:21:57,542:WARNING:No coef_ found. Trying feature_importances_
2025-03-13 11:21:57,677:INFO:Visual Rendered Successfully
2025-03-13 11:21:57,736:INFO:plot_model() successfully completed......................................
2025-03-13 11:22:21,009:INFO:Initializing plot_model()
2025-03-13 11:22:21,009:INFO:plot_model(plot=rfe, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:22:21,009:INFO:Checking exceptions
2025-03-13 11:22:22,593:INFO:Initializing plot_model()
2025-03-13 11:22:22,593:INFO:plot_model(plot=learning, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:22:22,593:INFO:Checking exceptions
2025-03-13 11:22:22,623:INFO:Preloading libraries
2025-03-13 11:22:22,759:INFO:Copying training dataset
2025-03-13 11:22:22,759:INFO:Plot type: learning
2025-03-13 11:22:22,859:INFO:Fitting Model
2025-03-13 11:23:41,314:INFO:Initializing predict_model()
2025-03-13 11:23:41,314:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002150FF32040>)
2025-03-13 11:23:41,314:INFO:Checking exceptions
2025-03-13 11:23:41,314:INFO:Preloading libraries
2025-03-13 11:23:41,316:INFO:Set up data.
2025-03-13 11:23:41,322:INFO:Set up index.
2025-03-13 11:23:41,538:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:23:41,544:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:23:41,550:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 99000.0) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-13 11:23:41,701:INFO:Initializing plot_model()
2025-03-13 11:23:41,701:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:23:41,702:INFO:Checking exceptions
2025-03-13 11:23:41,733:INFO:Preloading libraries
2025-03-13 11:23:41,882:INFO:Copying training dataset
2025-03-13 11:23:41,882:INFO:Plot type: parameter
2025-03-13 11:23:41,885:INFO:Visual Rendered Successfully
2025-03-13 11:23:41,959:INFO:plot_model() successfully completed......................................
2025-03-13 11:23:48,853:INFO:Initializing plot_model()
2025-03-13 11:23:48,853:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:23:48,853:INFO:Checking exceptions
2025-03-13 11:23:48,882:INFO:Preloading libraries
2025-03-13 11:23:49,037:INFO:Copying training dataset
2025-03-13 11:23:49,038:INFO:Plot type: auc
2025-03-13 11:23:49,140:INFO:Fitting Model
2025-03-13 11:23:49,141:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2025-03-13 11:23:49,142:INFO:Scoring test/hold-out set
2025-03-13 11:23:49,498:INFO:Visual Rendered Successfully
2025-03-13 11:23:49,577:INFO:plot_model() successfully completed......................................
2025-03-13 11:23:49,939:INFO:Initializing plot_model()
2025-03-13 11:23:49,940:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:23:49,940:INFO:Checking exceptions
2025-03-13 11:23:49,970:INFO:Preloading libraries
2025-03-13 11:23:50,128:INFO:Copying training dataset
2025-03-13 11:23:50,128:INFO:Plot type: confusion_matrix
2025-03-13 11:23:50,224:INFO:Fitting Model
2025-03-13 11:23:50,224:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2025-03-13 11:23:50,225:INFO:Scoring test/hold-out set
2025-03-13 11:23:50,624:INFO:Visual Rendered Successfully
2025-03-13 11:23:50,692:INFO:plot_model() successfully completed......................................
2025-03-13 11:29:04,954:INFO:Initializing plot_model()
2025-03-13 11:29:04,955:INFO:plot_model(plot=tree, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:29:04,955:INFO:Checking exceptions
2025-03-13 11:29:04,985:INFO:Preloading libraries
2025-03-13 11:29:05,132:INFO:Copying training dataset
2025-03-13 11:29:05,132:INFO:Plot type: tree
2025-03-13 11:29:06,035:INFO:Plotting decision trees
2025-03-13 11:29:06,063:INFO:Plotting tree 0
2025-03-13 11:29:17,757:INFO:Initializing plot_model()
2025-03-13 11:29:17,757:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:29:17,757:INFO:Checking exceptions
2025-03-13 11:29:17,786:INFO:Preloading libraries
2025-03-13 11:29:17,937:INFO:Copying training dataset
2025-03-13 11:29:17,937:INFO:Plot type: confusion_matrix
2025-03-13 11:29:18,054:INFO:Fitting Model
2025-03-13 11:29:18,054:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2025-03-13 11:29:18,055:INFO:Scoring test/hold-out set
2025-03-13 11:29:18,410:INFO:Visual Rendered Successfully
2025-03-13 11:29:18,609:INFO:plot_model() successfully completed......................................
2025-03-13 11:29:20,489:INFO:Initializing plot_model()
2025-03-13 11:29:20,489:INFO:plot_model(plot=pr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:29:20,489:INFO:Checking exceptions
2025-03-13 11:29:20,526:INFO:Preloading libraries
2025-03-13 11:29:20,661:INFO:Copying training dataset
2025-03-13 11:29:20,661:INFO:Plot type: pr
2025-03-13 11:29:20,761:INFO:Fitting Model
2025-03-13 11:29:23,245:INFO:Scoring test/hold-out set
2025-03-13 11:29:24,469:INFO:Visual Rendered Successfully
2025-03-13 11:29:24,666:INFO:plot_model() successfully completed......................................
2025-03-13 11:29:24,757:INFO:Initializing plot_model()
2025-03-13 11:29:24,757:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021493DB0130>, system=True)
2025-03-13 11:29:24,757:INFO:Checking exceptions
2025-03-13 11:29:24,788:INFO:Preloading libraries
2025-03-13 11:29:24,927:INFO:Copying training dataset
2025-03-13 11:29:24,928:INFO:Plot type: auc
2025-03-13 11:29:25,019:INFO:Fitting Model
2025-03-13 11:29:25,020:WARNING:c:\Users\Asus\anaconda3\envs\RUL\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but ExtraTreesClassifier was fitted with feature names
  warnings.warn(

2025-03-13 11:29:25,021:INFO:Scoring test/hold-out set
2025-03-13 11:29:25,323:INFO:Visual Rendered Successfully
2025-03-13 11:29:25,507:INFO:plot_model() successfully completed......................................
